import { useState, useEffect } from 'react';
import { updateProduct, getProductById } from '../../services/productService';
import { useRouter } from 'next/router';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSave, faImage, faArrowLeft } from '@fortawesome/free-solid-svg-icons';

export default function EditProduct() {
  const router = useRouter();
  const { id } = router.query;

  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState(0);
  const [stock, setStock] = useState(0);
  const [featuredImage, setFeaturedImage] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    if (id) {
      getProductById(id).then(product => {
        setName(product.name);
        setDescription(product.description);
        setPrice(product.price);
        setStock(product.stock);
        setFeaturedImage(product.featuredImage);
      });
    }
  }, [id]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Form validation
    if (name.length > 50) {
      return setError("Product name must be less than 50 characters.");
    }
    if (description.length > 200) {
      return setError("Description must be less than 200 characters.");
    }
    if (price <= 0 || price > 999999) {
      return setError("Price must be a positive number and less than 999999.");
    }
    if (stock < 0 || stock > 10000) {
      return setError("Stock must be a positive integer less than 10000.");
    }
    if (featuredImage.length > 500) {
      return setError("Featured Image URL must be less than 500 characters.");
    }

    try {
      await updateProduct(id, { name, description, price, stock, featuredImage });
      router.push('/');
    } catch (error) {
      console.error(error);
      setError("An error occurred while updating the product.");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <form onSubmit={handleSubmit} className="max-w-lg w-full p-6 bg-white shadow-lg rounded-lg">
        <h1 className="text-2xl font-bold mb-6 text-center">Edit Product</h1>
        {error && <p className="text-red-500 text-center mb-4">{error}</p>}

        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Name:</label>
          <input
            type="text"
            placeholder="Enter product name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            maxLength="50" // Limit max characters
            required
            className="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Description:</label>
          <textarea
            placeholder="Enter product description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            maxLength="200" // Limit max characters
            required
            className="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          ></textarea>
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Price:</label>
          <input
            type="number"
            placeholder="Enter price"
            value={price}
            onChange={(e) => setPrice(parseFloat(e.target.value))}
            min="0"
            max="999999" // Set max price
            required
            className="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Stock:</label>
          <input
            type="number"
            placeholder="Enter stock quantity"
            value={stock}
            onChange={(e) => setStock(parseInt(e.target.value, 10))}
            min="0"
            max="10000" // Set max stock
            required
            className="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Featured Image URL:</label>
          <input
            type="url"
            placeholder="Enter Featured Image URL"
            value={featuredImage}
            onChange={(e) => setFeaturedImage(e.target.value)}
            maxLength="500" // Limit URL length
            required
            className="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          <p className="text-gray-500 text-xs mt-1"><FontAwesomeIcon icon={faImage} className="mr-1" /> Ensure it's a valid image URL.</p>
        </div>

        <div className="flex justify-between mt-6">
          <button type="button" onClick={() => router.back()} className="flex items-center justify-center w-full bg-gray-300 text-gray-800 py-2 rounded-md hover:bg-gray-400 transition duration-200 mr-2">
            <FontAwesomeIcon icon={faArrowLeft} className="mr-1" /> Back
          </button>
          <button type="submit" className="flex items-center justify-center w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition duration-200">
            <FontAwesomeIcon icon={faSave} className="mr-2" /> Save Changes
          </button>
        </div>
      </form>
    </div>
  );
}
